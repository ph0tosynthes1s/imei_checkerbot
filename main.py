import time

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State


import markups as nav
import api as api
from db import Database
import keys

storage = MemoryStorage()
bot = Bot(token=keys.TOKEN)
dp = Dispatcher(bot, storage=storage)

db = Database('database.db')

#—Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É—Å—Ç—ã—à–∫–∏
class ForAdminPacifier1(StatesGroup):
    waiting_from = State()
    waiting_phone = State()
    waiting_msg = State()

#—Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É—Å—Ç—ã—à–∫–∏
class ForAdminPacifier2(StatesGroup):
    waiting_from = State()
    waiting_phone = State()
    waiting_msg = State()

#—Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É—Å—Ç—ã—à–∫–∏
class ForAdminPacifier3(StatesGroup):
    waiting_from = State()
    waiting_phone = State()
    waiting_msg = State()

#—Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
class ForAdminSpecialStates(StatesGroup):
    waiting_from = State()
    waiting_phone = State()
    waiting_msg = State()

class ForAdminStates(StatesGroup):
    waiting_msg = State()

class ForAdminPurchaseStates(StatesGroup):
    waiting_id = State()

class ForAdminUserBalance(StatesGroup):
    waiting_id = State()

class ForAdminPrice(StatesGroup):
    waiting_name = State()
    waiting_spec = State()
    waiting_price = State()

class ForAdminBalanceStates(StatesGroup):
    waiting_id = State()
    waiting_balance = State()

class ImeiStates(StatesGroup):
    waiting_imei_fOn1 = State()
    waiting_imei_fOn2 = State()
    waiting_imei_—ÅLo1 = State()
    waiting_imei_—ÅLo2 = State()
    waiting_imei_bInf = State()
    waiting_imei_sBy = State()
    waiting_serial_findMac = State()
    waiting_serial_clo_Mac = State()
    waiting_imei_all_in = State()
    waiting_sim_lock = State()
    waiting_mdm_status = State()
    waiting_model_storage = State()
    waiting_allInCar = State()
    waiting_convertImei = State()
    waiting_partNum = State()
    waiting_fullGsx = State()
    waiting_idinFogsx = State()

class PhoneStates(StatesGroup):
    waiting_phone_ping = State()
    waiting_hlr_ping = State()

class DhruStates(StatesGroup):
    waiting_imei = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    username = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + str(message.from_user.username) + '!'
    full_message = f'üì±{username}\n\n –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã!'
    await bot.send_message(message.from_user.id, full_message, reply_markup=nav.mainMenu)

@dp.message_handler(text_contains= '‚öô –£—Å–ª—É–≥–∏', state='*')
async def services(message: types.Message, state: FSMContext):
    if message.text == '‚öô –£—Å–ª—É–≥–∏':
            await bot.send_message(message.from_user.id, '‚öô –£—Å–ª—É–≥–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.', reply_markup=nav.choice)
            await state.finish()


@dp.message_handler(text_contains= 'üôã‚Äç‚ôÇÔ∏è–í–æ–π—Ç–∏!', state='*')
async def start(message: types.Message, state: FSMContext):
    if message.text == 'üôã‚Äç‚ôÇÔ∏è–í–æ–π—Ç–∏!':
        await state.finish()
        if not db.user_exists(message.from_user.id) and not db.user_admin(message.from_user.id):
            username = '–£–≤–∞–∂–∞–µ–º—ã–π, ' + str(message.from_user.username)
            full_message = f'üì±{username}\n\n ‚ö† –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã!'
            await bot.send_message(message.from_user.id,
                                   full_message,
                                   reply_markup=nav.mainMenu)

        elif db.user_exists(message.from_user.id) and db.user_admin(message.from_user.id):
            username = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + str(message.from_user.username) + '!'
            full_message = f'üì±{username}\n\n –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å, –∞–¥–º–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É!'
            await bot.send_message(message.from_user.id,
                                   full_message,
                                   reply_markup=nav.adminMenu)
        else:
            username = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + str(message.from_user.username) + '!'
            full_message = f'üì±{username}\n\n –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É!'
            await bot.send_message(message.from_user.id,
                                   full_message,
                                   reply_markup=nav.profileMenu)

@dp.message_handler(state=ImeiStates.waiting_mdm_status)
async def clean_lost_mac_message(message: types.Message, state: FSMContext):
    await state.update_data(imei=message.text)
    service_id = 10
    service_name = db.get_service_name(service_id)
    check = await message.answer(f'üì±{service_name}\n\nüíµ–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!',reply_markup=nav.cancelSolo)
    answer = api.mdm_status(message.text, message.from_user.id, message.date)
    if db.user_special(message.from_user.id):
        service_price = db.get_price_special(service_name)
    else:
        service_price = db.get_price(service_name)
    await message.reply(f'‚úÖ–í–∞—à–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\nüì±{service_name}\n\n{answer}\n\nüíµ–í–∞—à –±–∞–ª–∞–Ω—Å: {round(db.get_balance(message.from_user.id) + service_price, 2)} => {round(db.get_balance(message.from_user.id), 2)}')
    await check.delete()
    if '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π' not in answer:
        db.user_pay(message.from_user.id, service_price)
        db.add_purchase(message.from_user.id, service_name, message.text,message.date)
    else:
        await message.answer(f'‚ùå–í–∞—à–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n–í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã!\n\nüíµ–í–∞—à –±–∞–ª–∞–Ω—Å: {round(db.get_balance(message.from_user.id), 2)}',
        reply_markup=nav.cancelSolo)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)


